cmake_minimum_required(VERSION 3.0)

project(SceneParser)

set(SceneParser_VERSION "0.0")
set(SceneParser_VERSION_NUMBER "0000")

################################################################################
# Include CMake dependencies
################################################################################

set(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake)

include(CheckCXXCompilerFlag)

# Include helper macros and commands, and allow the included file to override
# the CMake policies in this file
include(${CMAKE_CURRENT_SOURCE_DIR}/cmake/CMakeHelper.cmake NO_POLICY_SCOPE)


################################################################################
# Options
################################################################################

option(OPENMP_ENABLED "Whether to enable OpenMP parallelization" ON)
option(IPO_ENABLED "Whether to enable interprocedural optimization" ON)
option(OPENGL_ENABLED "Whether to enable OpenGL, if available" ON)
option(CGAL_ENABLED "Whether to enable the CGAL library" ON)
option(BOOST_STATIC "Whether to enable static boost library linker flags" ON)

if(BOOST_STATIC)
    set(Boost_USE_STATIC_LIBS ON)
else()
    add_definitions("-DBOOST_TEST_DYN_LINK")
endif()


################################################################################
# Find packages
################################################################################

if(OPENMP_ENABLED)
    find_package(OpenMP QUIET)
endif()

find_package(Ceres REQUIRED)

find_package(Boost REQUIRED COMPONENTS
             program_options
             filesystem
             graph
             regex
             system
             unit_test_framework)

find_package(Eigen3 REQUIRED)
# TODO: check again
find_package(OpenCV REQUIRED)
find_package(MRPT REQUIRED)
find_package(Glog REQUIRED)
find_package(OpenGL REQUIRED)
find_package(Glew REQUIRED)
find_package(Git)


if(CGAL_ENABLED)
    set(CGAL_DO_NOT_WARN_ABOUT_CMAKE_BUILD_TYPE TRUE)
    find_package(CGAL QUIET)
endif()

if(CGAL_FOUND)
    list(APPEND CGAL_LIBRARY ${CGAL_LIBRARIES})
    message(STATUS "Found CGAL")
    message(STATUS "  Includes : ${CGAL_INCLUDE_DIRS}")
    message(STATUS "  Libraries : ${CGAL_LIBRARY}")
endif()

################################################################################
# Compiler specific configuration
################################################################################

if(CMAKE_BUILD_TYPE)
    message(STATUS "Build type specified as ${CMAKE_BUILD_TYPE}")
else()
    message(STATUS "Build type not specified, using Release")
    set(CMAKE_BUILD_TYPE Release)
    set(IS_DEBUG OFF)
endif()

if(IS_MSVC)
    # Some fixes for the Glog library.
    add_definitions("-DGLOG_NO_ABBREVIATED_SEVERITIES")
    add_definitions("-DGL_GLEXT_PROTOTYPES")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /EHsc")
    # Enable object level parallel builds in Visual Studio.
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /MP")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP")
endif()

if(IS_GNU)
    # Hide incorrect warnings for uninitialized Eigen variables under GCC.
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wno-maybe-uninitialized")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-maybe-uninitialized")
endif()

if(IS_DEBUG)
    add_definitions("-DEIGEN_INITIALIZE_MATRICES_BY_NAN")
endif()

if(OPENMP_ENABLED AND OPENMP_FOUND)
    message(STATUS "Enabling OpenMP support")
    add_definitions("-DOPENMP_ENABLED")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
else()
    message(STATUS "Disabling OpenMP support")
endif()


if(OPENGL_ENABLED)
    add_definitions("-DOPENGL_ENABLED")
    message(STATUS "Enabling OpenGL support")
else()
    message(STATUS "Disabling OpenGL support")
endif()

if(CGAL_FOUND AND CGAL_ENABLED)
    message(STATUS "Enabling CGAL support")
    add_definitions("-DCGAL_ENABLED")
else()
    message(STATUS "Disabling CGAL support")
    set(CGAL_ENABLED OFF)
endif()

# Enable automatic compilation of Qt resource files.
set(CMAKE_AUTORCC ON)

################################################################################
# Add sources
################################################################################

# Generate source file with version definitions.
include(GenerateVersionDefinitions)

set(SceneParser_INCLUDE_DIRS
    ${Boost_INCLUDE_DIRS}
    ${EIGEN3_INCLUDE_DIRS}
    ${GLOG_INCLUDE_DIRS}
    ${CERES_INCLUDE_DIRS}
    ${GLEW_INCLUDE_DIRS}
    ${OPENCV_INCLUDE_DIRS}
    ${MRPT_INCLUDE_DIRS}

)

set(SceneParser_LINK_DIRS
    ${Boost_LIBRARY_DIRS}
)

set(SceneParser_EXTERNAL_LIBRARIES
    ${CMAKE_DL_LIBS}
    ${Boost_FILESYSTEM_LIBRARY}
    ${Boost_PROGRAM_OPTIONS_LIBRARY}
    ${Boost_REGEX_LIBRARY}
    ${Boost_SYSTEM_LIBRARY}
    ${GLOG_LIBRARIES}
    ${CERES_LIBRARIES}
    ${OPENGL_gl_LIBRARY}
    ${OPENGL_glu_LIBRARY}
    ${OPENCV_INCLUDE_DIRS}
    ${MRPT_INCLUDE_DIRS}
)

if(OPENMP_FOUND)
    list(APPEND SceneParser_EXTERNAL_LIBRARIES ${OpenMP_libomp_LIBRARY})
endif()

if(CGAL_FOUND)
    list(APPEND SceneParser_INCLUDE_DIRS ${CGAL_INCLUDE_DIRS} ${GMP_INCLUDE_DIR})
    list(APPEND SceneParser_EXTERNAL_LIBRARIES ${CGAL_LIBRARY} ${GMP_LIBRARIES})
    list(APPEND SceneParser_LINK_DIRS ${CGAL_LIBRARIES_DIR})
endif()

if(UNIX)
    list(APPEND SceneParser_EXTERNAL_LIBRARIES pthread)
endif()

set(SceneParser_INTERNAL_LIBRARIES
    sqlite3
)

include_directories(
    lib
    src
    ${SceneParser_INCLUDE_DIRS}
)

link_directories(${SceneParser_LINK_DIRS})

add_subdirectory(lib)
add_subdirectory(src)

################################################################################
# Generate source groups for Visual Studio, XCode, etc.
################################################################################

SceneParser_ADD_SOURCE_DIR(lib/SQLite LIB_SQLITE_SRCS *.h *.c)

SceneParser_ADD_SOURCE_DIR(src/base BASE_SRCS *.h *.cc)
SceneParser_ADD_SOURCE_DIR(src/controllers CONTROLLERS_SRCS *.h *.cc)
SceneParser_ADD_SOURCE_DIR(src/exe EXE_SRCS *.h *.cc)
SceneParser_ADD_SOURCE_DIR(src/optim OPTIM_SRCS *.h *.cc)
SceneParser_ADD_SOURCE_DIR(src/tools TOOLS_SRCS *.h *.cc)
SceneParser_ADD_SOURCE_DIR(src/util UTIL_SRCS *.h *.cc)

# Add all of the source files to a regular library target, as using a custom
# target does not allow us to set its C++ include directories (and thus
# intellisense can't find any of the included files).
add_library(
    ${SceneParser_SRC_ROOT_FOLDER}
    ${LIB_SQLITE_SRCS}
    ${BASE_SRCS}
    ${CONTROLLERS_SRCS}
    ${EXE_SRCS}
    ${OPTIM_SRCS}
    ${TOOLS_SRCS}
    ${UTIL_SRCS}
)

# Prevent the library from being compiled automatically.
set_target_properties(
    ${SceneParser_SRC_ROOT_FOLDER} PROPERTIES
    EXCLUDE_FROM_ALL 1
    EXCLUDE_FROM_DEFAULT_BUILD 1)




#set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -fopenmp")

#include_directories(${COLMAP_INCLUDE_DIRS})
#link_directories(${COLMAP_LINK_DIRS})



#file(GLOB_RECURSE planeMerge_SRC "src/*.cpp" "src/*.h" "src/*.inc" )
#add_executable(planeMerge ${planeMerge_SRC})
#target_link_libraries(planeMerge ${COLMAP_LIBRARIES} ${OpenCV_LIBS} ${ZLIB_LIBRARIES} ${MRPT_LIBS} )

#IF(CMAKE_COMPILER_IS_GNUCXX AND NOT CMAKE_BUILD_TYPE MATCHES "Debug")
#SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O3")
#ENDIF(CMAKE_COMPILER_IS_GNUCXX AND NOT CMAKE_BUILD_TYPE MATCHES "Debug")
